name: Build and Test Docker Image for PRs

# Trigger workflow on changes to these paths in stated branch
# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#on
on:
  pull_request:
    branches:
      - master
    #types: [opened, edited, repoened, review_requested]

concurrency:
  group: testing_environment
  cancel-in-progress: false


jobs:

  # Wait for up ten minutes for previous run to complete, abort if not done by then
  #pre-build:
  #  runs-on: IT04GISTINAIS2L
  #  timeout-minutes: 10
  #  steps:
  #    - name: 'Block Concurrent Action Workflow Executions'
  #      uses: softprops/turnstyle@v1
  #      with:
  #        poll-interval-seconds: 10
  #      env:
  #      #  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #        GITHUB-TOKEN: ${{ github.token }}

  build:
    name: Build and Test docker container
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    #runs-on: IT04GISPINAIS2L
    runs-on: ais-runner 
    # https://github.community/t/sharing-a-variable-between-jobs/16967/13
    # save address for use in other jobs.

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    # This is a github function? Ref doc: https://github.com/actions/checkout#checkout-a-different-branch
    - uses: actions/checkout@v2
      with:
        # pull the HEAD commit from the PR instaed of the HEAD commit
        #ref: ${{ github.event.pull_request.head.sha }}
        ref: roland-dev-6-29-22

    # https://github.com/aws-actions/amazon-ecr-login
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Print current working directory
      run: pwd

    - name: Pull private passyunk data
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        REPOSITORY_URL: 880708401960.dkr.ecr.us-east-1.amazonaws.com/ais
      run: |
          aws s3 cp s3://ais-static-files/election_block.csv .  --only-show-errors
          aws s3 cp s3://ais-static-files/usps_zip4s.csv .  --only-show-errors

    # Set $PROD_COLOR env var through the complicated method github actions requires
    # https://docs.github.com/en/actions/learn-github-actions/workflow-commands-for-github-actions#setting-an-environment-variable
    - name: Identify production cluster, either blue or green
      id: prod-cluster-color
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        PROD_ENDPOINT: ${{ secrets.PROD_ENDPOINT }}
      run: |
          # Note: a simple dig doesn't work from in office.
          # Run the command manually first so we're sure it works, otherwise the var assignment hides errors.
          #echo "PROD_COLOR=$(dig ${{ secrets.PROD_ENDPOINT }} +short | grep -o "blue\|green")" >> $GITHUB_ENV
          #dig ${{ secrets.PROD_ENDPOINT }} +short | grep -o "blue\|green"
          aws route53 list-resource-record-sets --hosted-zone-id ${{ secrets.PHILACITY_ZONE_ID }} --query "ResourceRecordSets[?Name == '${{ secrets.PROD_ENDPOINT }}.']" | grep -o "blue\|green"
          echo "PROD_COLOR=$(aws route53 list-resource-record-sets --hosted-zone-id ${{ secrets.PHILACITY_ZONE_ID }} --query "ResourceRecordSets[?Name == '${{ secrets.PROD_ENDPOINT }}.']" | grep -o "blue\|green")" >> $GITHUB_ENV
           
    - name: Set engine hostname to the production database for testing against.
      env:
        PROD_ENDPOINT: ${{ secrets.PROD_ENDPOINT }}
      run: |
        if [[ "$PROD_COLOR" -eq "blue" ]]; then
           echo "ENGINE_HOST=${{ secrets.BLUE_ENGINE_CNAME }}" >> $GITHUB_ENV
        elif [[ "$PROD_COLOR" -eq "green" ]]; then
           echo "ENGINE_HOST=${{ secrets.GREEN_ENGINE_CNAME }}" >> $GITHUB_ENV
        fi

    - name: Build and start the Docker image using docker-compose
      env:
        ENGINE_DB_HOST: ${{ env.ENGINE_HOST }}
        ENGINE_DB_PASS: ${{ secrets.ENGINE_DB_PASS }}
      run: docker-compose -f build-test-compose.yml up --build -d

    - name: Run API pytests to ensure image build is good
      env:
        ENGINE_DB_HOST: ${{ env.ENGINE_HOST }}
        ENGINE_DB_PASS: ${{ secrets.ENGINE_DB_PASS }}
      run: |
          docker exec ais bash -c 'cd /ais && . ./env/bin/activate && pytest -vvv -ra --showlocals /ais/ais/api/tests/'

    - name: Confirm nginx configuration is good
      run: docker exec ais bash -c 'nginx -t'

    - name: Simple curl query check
      run: curl http://localhost:8080/search/1234%20Market%20Street

    - uses: patrickpaulin/ms-teams-deploy-card@master
      if: always()
      with:
        GITHUB-TOKEN: ${{ github.token }}
        WEBHOOK-URI: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
        card-layout-exit: complete
        show-on-start: false
        show-on-exit: true
        custom-facts: |
          - name: Job Progress
            value: Build successful for branch ${{ env.GITHUB_REF }}
